package ${packageName}.controller;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.fastjson.JSONObject;
import com.bazl.dna.annotation.CurrentUser;
import com.bazl.dna.common.ErrorCodes;
import com.bazl.dna.common.ErrorInfo;
import com.bazl.dna.common.PublicConstants;
import com.bazl.dna.common.ResponseData;
import com.bazl.dna.common.filter.AuthUser;
import com.bazl.dna.controller.BaseController;
import ${packageName}.entity.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.bazl.dna.util.DataUtils;
import com.google.common.collect.Maps;

/**
 * ${functionName} Controller
 * 
 * @author ${author}
 */
@RestController
@RequestMapping("/${businessName}")
public class ${ClassName}Controller extends BaseController {

	@Autowired
	private I${ClassName}Service ${className}Service;

	/**
	 * ${functionName}保存
	 *
	 * @param ${className} 对象
	 * @return Map<String, Object>
	 */
	@PutMapping("/save")
	public Map<String, Object> save(@RequestBody ${ClassName} ${className}, @CurrentUser AuthUser authUser) {
		if (DataUtils.isEmpty(${className}.getId())) {
			${className}.setCreateUser(authUser.getUsername());
		} else {
			${className}.setUpdateUser(authUser.getUsername());
		}
		${ClassName} entity = ${className}Service.save(${className});
		Map<String, Object> result = Maps.newHashMap();
		result.put(PublicConstants.CODE, PublicConstants.SUCCESS_CODE);
		result.put(PublicConstants.MSG, entity);
		return result;
	}

	/**
	 * 获取${functionName}
	 *
	 * @param id 编号
	 * @return ${ClassName}
	 */
	@GetMapping("/get/{id}")
	public ${ClassName} get(@PathVariable String id) {
		return ${className}Service.getById(id);
	}

	/**
	 * ${functionName}分页列表
	 *
	 * @param paramJson 参数
	 * @return Page<${ClassName}>
	 */
	@PostMapping("/pageList")
	public ResponseData pageList(@RequestBody JSONObject paramJson) {
		return ${className}Service.pageList(paramJson);
	}
	
	/**
	 * ${functionName}列表
	 *
	 * @param paramJson 参数
	 * @return List<${ClassName}>
	 */
	@PostMapping("/list")
	public ResponseData list(@RequestBody JSONObject paramJson) {
		return ${className}Service.findList(paramJson);
	}

	/**
	 * 删除${functionName}
	 *
	 * @param ids 编号
	 * @return Map<String, Object>
	 */
	@DeleteMapping("/delete")
	public ResponseData delete(@RequestBody String... ids) {
		if (DataUtils.isEmpty(ids)) {
			return new ResponseData(ErrorCodes.ERR_PARAM, ErrorInfo.ERR_PARAM);
		}
		int code = 0;
		for (String id : ids) {
			code = ${className}Service.deleteById(id);
		}
		Map<String, Object> result = Maps.newHashMap();
		result.put(PublicConstants.CODE, code);
		return result;
	}

	/**
	 * 导出Excel
	 *
	 * @param paramJson 参数
	 * @return ResponseEntity<byte[]>
	 */
	@PostMapping("/export")
	public ResponseEntity<byte[]> export(@RequestBody JSONObject paramJson){
	    List<${ClassName}> list = ${className}Service.findList(paramJson);

		String[] titleKeys = new String[]{#foreach ($column in $columns) "$column.columnComment", #end};
		String[] columnNames = {#foreach ($column in $columns) "$column.javaField", #end};

		String fileName = ${ClassName}.class.getSimpleName() + new Date().getTime();
		return exportExcel(fileName, titleKeys, columnNames, list);
	}

}
